name: "Focal CI"

on:
  schedule:
    - cron: '0 2 * * *' # trigger build at 2 a.m.
  workflow_dispatch: # or upon user request

jobs:

  # cpp-build-and-test-performance:

  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]  # This will use the latest stable version of Ubuntu.
  #       dist: [focal]
  #       compiler: [g++]

  #   runs-on: ${{ matrix.os }}

  #   steps:

  #   - name: Checkout repository
  #     uses: actions/checkout@v4
  #     with:
  #       ref: main
    
  #   - name: Set up environment
  #     run: |

  #       set -e

  #       rm -rf /opt/pyenv
  #       sudo apt-get update
  #       sudo apt-get install git libgtest-dev cmake libeigen3-dev pybind11-dev lsb-release python3-numpy

  #   - name: Build and test cpp library only
  #     run: |
        
  #       set -e

  #       mkdir build
  #       cd build
  #       cmake ../SharsorIPCpp/ -DWITH_TESTS=ON -DWITH_PYTHON=OFF ..
  #       sudo make -j4 install
  #       ctest --output-on-failure --verbose 

  # cpp-build-and-test-consistency:

  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]  # This will use the latest stable version of Ubuntu.
  #       dist: [focal]
  #       compiler: [g++]

  #   runs-on: ${{ matrix.os }}

  #   steps:

  #   - name: Checkout repository
  #     uses: actions/checkout@v4
  #     with:
  #       ref: main
    
  #   - name: Set up environment
  #     run: |

  #       set -e

  #       rm -rf /opt/pyenv
  #       sudo apt-get update
  #       sudo apt-get install git libgtest-dev cmake libeigen3-dev pybind11-dev lsb-release python3-numpy

  #   - name: Build and test cpp library only
  #     run: |

  #       set -e

  #       mkdir build
  #       cd build
  #       cmake ../SharsorIPCpp/ -DWITH_TESTS=ON -DWITH_PYTHON=OFF ..
  #       sudo make -j4 install
  #       cd tests
  #       ./run_consistency_check.sh

  pybinds-build-test-upload:

    # needs: cpp-build-and-test-consistency 

    env:
      ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN }}

    strategy:
      matrix:
        os: [ubuntu-latest]  # This will use the latest stable version of Ubuntu.
        dist: [focal]
        compiler: [g++]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']

    runs-on: ${{ matrix.os }}

    steps:

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: main

    - name: Set up environment
      run: |
        
        set -e

        rm -rf /opt/pyenv
        sudo apt-get update
        sudo apt-get install git libgtest-dev cmake libeigen3-dev pybind11-dev lsb-release python3-numpy
        echo "Current python version: "
        python3 --version

    # - name: Build and test python bindings
    #   run: |

    #     set -e

    #     mkdir build
    #     cd build
    #     WITH_TESTS=ON
    #     WITH_PYTHON=ON
    #     cmake ../SharsorIPCpp/ -DWITH_TESTS=ON -DWITH_PYTHON=ON ..
    #     sudo make -j4 install
    #     export PYTHONPATH=$PYTHONPATH:/usr/local/lib/python3/dist-packages/
    #     echo "Current PYTHONPATH: "
    #     echo $PYTHONPATH
    #     ./run_consistency_check.sh
    #     python3 tests/PySharsorIPC/perf_and_consistency_test.py

    # we don't run the tests for each python version
    - name: Build and upload to Anaconda
      shell: bash -l {0}
      run: |

        set -e

        # Install Miniconda
        wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
        bash miniconda.sh -b -p $HOME/miniconda
        source "$HOME/miniconda/etc/profile.d/conda.sh"
        hash -r
        conda config --set always_yes yes --set changeps1 no
        conda update -q conda

        # Useful for debugging any issues with conda
        conda info -a

        echo "Building for Python ${{ matrix.python-version }}"

        conda env create -f conda/build_envs/py${{ matrix.python-version }}_env.yml
        conda activate py${{ matrix.python-version }}_env
                
        conda build conda/
        package_path=$(conda build conda/ --output)
        echo "Conda build package path:"
        echo ${package_path}

        anaconda -t $ANACONDA_API_TOKEN upload --user AndrePatri --force $package_path

        anaconda logout

        conda deactivate
          
    - name: Notify on failure
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{secrets.MAIL_USERNAME}}
        password: ${{secrets.MAIL_PASSWORD}}
        subject: GitHub Actions Build Failure
        to: andreapatrizi1b6e6@gmail.com
        body: The build failed. Please check the logs.

